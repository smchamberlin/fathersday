{"version":3,"sources":["components/fathersday.jpg","logo.svg","components/Music.js","components/Switcher.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Music","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","singing","text","musicPlaying","_this2","Tone","stop","setState","synth","toMaster","time","note","setTimeout","console","log","triggerAttackRelease","start","_this3","react_default","a","createElement","id","class","onClick","e","playMusic","React","Component","Switcher","greeting","video","timeMachine","index","ContentSwitcher","onChange","handleChange","Switch","name","src","Dad","width","height","frameborder","allow","allowfullscreen","Music_Music","App","className","Switcher_Switcher","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0157be5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fathersday.9d1ff83d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport '../css/styles.css';\nimport * as Tone from \"tone\";\nimport { Button, SelectItemGroup } from 'carbon-components-react';\n\nexport default class Music extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          singing: false,\n          text: \"Click on me to start/stop music!\"\n      };\n      this.musicPlaying = false;\n    }\n\n    playMusic() {\n\n        if (this.musicPlaying == true) {\n            Tone.Transport.stop();\n            this.musicPlaying = false;\n            this.setState({\"text\":\"Click on me to start/stop music!\"});\n            return;\n        }\n\n        // create a synth\n        const synth = new Tone.Synth().toMaster();\n        // create an array of notes to be played\n        const notes = [\"G4\", \"A4\", \"B4\", \"C5\", null, \"D5\", \"E5\", \"A4\", null, \"A4\", \"G4\", \"G4\", \"F4\", null, \"F4\", \"F4\", \"F4\", \"G4\", null];\n\n        // create a new sequence with the synth and notes\n        const synthPart = new Tone.Sequence(\n        (time, note) => {\n            this.setState({singing: true});\n            setTimeout(() => { this.setState({singing: false}) }, 300);\n            console.log(note);\n            this.setState({\"text\":note});\n            synth.triggerAttackRelease(note, \"3hz\", time);\n        },\n        notes,\n        \"0.5s\");\n\n        // Setup the synth to be ready to play on beat 1\n        synthPart.start();\n        // Note that if you pass a time into the start method \n        // you can specify when the synth part starts \n        // e.g. .start('8n') will start after 1 eighth note\n        // start the transport which controls the main timeline\n        //Tone.Transport.start();\n\n        // const chords = [\"C3\", \"E3\", \"G3\", \"C4\", null, null, \"A3\", \"C3\", \"E4\", \"G4\"];       \n        // // create a new sequence with the synth and notes\n        // const synthPart2 = new Tone.Sequence(\n        // (time, note) => {\n        //     synth.triggerAttackRelease(note, \"3hz\", time);\n        // },\n        // chords,\n        // \"0.5s\");     \n        \n        // synthPart2.start('1n')\n\n        Tone.Transport.start();\n        this.musicPlaying = true;\n    \n    }\n\n    render() {\n            const singing = this.state.singing;\n            return (\n            <div>\n              <p id=\"smileyText\">{this.state.text}</p> \n              <div class=\"smileyface\" onClick={(e) => this.playMusic()}>\n                    <p class=\"eyes lefteye\"></p>\n                    <p class=\"eyes righteye\"></p>\n                        {singing\n                        ? <div class=\"mouth\"></div>\n                        : <div class=\"smile\"><div class=\"corner\"></div>\n                        <div class=\"corner right\"></div></div>}\n                </div>\n            </div>);\n        }\n    }\n","import React from 'react';\nimport '../css/carbon-components.css';\nimport '../css/styles.css';\nimport { ContentSwitcher } from 'carbon-components-react';\nimport { Switch } from 'carbon-components-react';\nimport Music from './Music.js';\nimport Dad from './fathersday.jpg'\n\nexport default class Switcher extends React.Component {\n\nconstructor(props) {\n    super(props);\n    this.state = {\n        greeting: true,\n        video: false,\n        timeMachine: false\n    }\n}\n\nhandleChange(e) {\n    console.log(e);\n    if (e.index == 0) {\n        this.setState({greeting: true});\n        this.setState({video: false});\n        this.setState({timeMachine: false});\n    }\n    else if (e.index == 1) {\n        this.setState({timeMachine: true});\n        this.setState({greeting: false});\n        this.setState({video: false});\n    }\n    else if (e.index == 2) {\n        this.setState({video: true});\n        this.setState({greeting: false});\n        this.setState({timeMachine: false});\n    }\n}\n\nrender() {\n    return (\n    <div>\n        <ContentSwitcher id=\"content-switcher\" onChange={(e) => this.handleChange(e)}>\n            <Switch name={'Greeting'} text='Greeting' />\n            <Switch name={'Time Machine'} text='Time Machine' />\n            <Switch name={'Video'} text='Video' />\n        </ContentSwitcher>\n        {this.state.greeting ?\n            <img id=\"greeting-pic\" src={Dad}></img>\n            : null}\n        {this.state.video ?\n            <iframe id=\"video-iframe\" width=\"1120\" height=\"630\" src=\"https://www.youtube-nocookie.com/embed/RGwoaiwSIgo\" \n            frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen></iframe>\n            : null}     \n        {this.state.timeMachine ?\n            <Music />\n            : null}\n    </div>)\n}\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Music from './components/Music.js';\nimport Switcher from './components/Switcher.js';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n        <p id=\"headerText\"> \n          Happy Father's Day Dad !!\n        </p>\n      <Switcher />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}